pid /tmp/nginx.pid;

events {
    multi_accept on;
    worker_connections 1024;
    use epoll;
}

http {
    server_tokens off;

    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        '' $scheme;
    }

    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
    # server port the client connected to
    map $http_x_forwarded_port $proxy_x_forwarded_port {
        default $http_x_forwarded_port;
        '' $server_port;
    }

    # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
    # Connection header that may have been passed to this server
    map $http_upgrade $proxy_connection {
        default upgrade;
        '' close;
    }

    # Set appropriate X-Forwarded-Ssl header
    map $scheme $proxy_x_forwarded_ssl {
        default off;
        https on;
    }

    # Apply fix for very long server names
    server_names_hash_bucket_size 128;

    gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip on;

    log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer"';

    access_log off;

    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
    proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;

    # Mitigate HTTPoxy vulnerability
    # https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
    proxy_set_header Proxy "";

    add_header X-Response-Time $request_time;
    add_header X-Served-By $upstream_addr;

    server {
        listen 80;
        listen [::]:80;

        access_log /var/log/nginx/access.log vhost;

        location ~* ^/api/svc1(?:/(.*))?$ {
            rewrite ^/api/svc1(?:/(.*))?$ /$1 break;
            proxy_pass http://svc1;
        }

        location ~* ^/api/svc2(?:/(.*))?$ {
            rewrite ^/api(?:/(.*))?$ /$1 break;
            proxy_pass http://svc2;
        }

        location ~* ^/api/svc3(?:/(.*))?$ {
            rewrite ^/api/svc3(?:/(.*))?$ /$1 break;
            proxy_pass http://svc3;
        }

        location / {
            proxy_pass http://web;
        }
    }
}